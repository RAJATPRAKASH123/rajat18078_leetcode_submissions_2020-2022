{"id":499787757,"question_id":1029,"lang":"python3","lang_name":"Python3","time":"3 years, 9 months","timestamp":1622281435,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/499787757/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        res = defaultdict(lambda : defaultdict(list)) # column, row, its node.val\n        def dfs(root, row=0, col=0):\n            if not root:\n                return\n            res[col][row].append(root)\n            dfs(root.left, row+1, col-1)\n            dfs(root.right, row+1, col+1)\n        dfs(root)\n        \n        cols_arr = list(res.keys()) # keys of res\n        cols_arr.sort() #sorted\n        vert_traversal = []\n        for column in cols_arr:\n            temp = []\n            for row in res[column]:\n                cur_row_nodes = res[column][row]\n                cur_row_nodes = [node.val for node in cur_row_nodes]\n                cur_row_nodes.sort()\n                temp.extend(cur_row_nodes)\n            vert_traversal.append(temp)\n        return vert_traversal","compare_result":"11111111110111000000000000000000","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}