{"id":495878566,"question_id":1029,"lang":"python3","lang_name":"Python3","time":"3 years, 9 months","timestamp":1621531795,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/495878566/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        temp = defaultdict(list)\n        def helper(root, count = 0):\n            if not root:\n                return\n            temp[count].append(root.val)\n            helper(root.left, count-1)\n            helper(root.right, count+1)\n        helper(root)\n        minm = min(temp.keys())\n        maxm = max(temp.keys())\n        print(minm, maxm )\n        res = []\n        for i in range(minm, maxm+1):\n            res.append(temp[i])\n        return res","compare_result":"11011111110111000000000000000000","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}