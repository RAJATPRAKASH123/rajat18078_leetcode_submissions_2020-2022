{"id":499796348,"question_id":1029,"lang":"python3","lang_name":"Python3","time":"3 years, 9 months","timestamp":1622283193,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/499796348/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"14.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        res = defaultdict(lambda : defaultdict(list)) # column, row, its node.val\n        def dfs(root, row=0, col=0):\n            if not root:\n                return\n            res[col][row].append(root.val)\n            dfs(root.left, row+1, col-1)\n            dfs(root.right, row+1, col+1)\n        dfs(root)\n        cols_arr = sorted( list(res.keys()) ) # keys of res\n        vert_traversal = []\n        for column in cols_arr:\n            rows = res[column]\n            row_arr = sorted(list(rows.keys()))\n            cur_col = []\n            # print(column, row_arr)\n            for row in row_arr:\n                cur_col.extend(sorted(res[column][row]) )\n            vert_traversal.append(cur_col)\n        return vert_traversal","compare_result":"11111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}