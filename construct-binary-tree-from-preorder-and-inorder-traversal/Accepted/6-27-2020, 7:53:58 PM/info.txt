{"id":358973769,"question_id":105,"lang":"python3","lang_name":"Python3","time":"4 years, 8 months","timestamp":1593267838,"status":10,"status_display":"Accepted","runtime":"172 ms","url":"/submissions/detail/358973769/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"18.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        def helper(li, ri, lp, rp):\n            nonlocal inorder\n            nonlocal preorder\n            if li <= ri and lp <= rp:\n                root = TreeNode(preorder[lp])\n                inorder_idx = inorder.index(root.val)\n                root.left = helper(li, inorder_idx-1, lp + 1, lp + inorder_idx - li)\n                root.right = helper(inorder_idx + 1, ri, lp + inorder_idx - li + 1, rp)\n                return root\n        return helper(0, len(preorder)-1, 0, len(preorder)-1)\n            # return TreeNode(inorder[li])","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}