{"id":513771317,"question_id":115,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624770050,"status":10,"status_display":"Accepted","runtime":"404 ms","url":"/submissions/detail/513771317/","is_pending":"Not Pending","title":"Distinct Subsequences","memory":"59 MB","code":"class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        dp = [[0 for i in range(len(t) + 1)] for j in range(len(s) + 1)]\n        \n        for i in range( len(s) + 1):\n            for j in range(len(t) + 1):\n                if j == 0:\n                    dp[i][j] = 1\n                    continue\n                if i == 0:\n                    continue\n                dp[i][j] = dp[i-1][j]\n                if s[i-1] == t[j-1]:\n                    dp[i][j] += dp[i-1][j-1]\n        return dp[len(s)][len(t)]\n        \n        \n'''\n\n    for(int j=0; j<=S.length(); j++) {\n        mem[0][j] = 1;\n    }\n    \n    // the first column is 0 by default in every other rows but the first, which we need.\n    \n    for(int i=0; i<T.length(); i++) {\n        for(int j=0; j<S.length(); j++) {\n            if(T.charAt(i) == S.charAt(j)) {\n                mem[i+1][j+1] = mem[i][j] + mem[i+1][j];\n            } else {\n                mem[i+1][j+1] = mem[i+1][j];\n            }\n        }\n    }\n    \n    return mem[T.length()][S.length()];\n\nsubs(s_cur, t_cur):\n    \n    res = subs(s_cur-1, t_cur)\n    \n    if s[s_cur] == s[t_cur]:\n        res += subs(s_cur-1, t_cur-1)\n\nrabb\nrab\n'''\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n'''\n# Recursive Solution\ndef subs(start, t_cur):\n    nonlocal s, t\n    if t_cur == len(t):\n        return 1\n    if start == len(s):\n        return 0\n    if dp[start][t_cur] != -1:\n        return dp[start][t_cur]\n    res = 0\n    for next in range(start, len(s)):\n        if t[t_cur] == s[next]:\n            res += subs(next + 1, t_cur + 1)\n    dp[start][t_cur] = res\n    return dp[start][t_cur]\nreturn subs(0, 0)\n'''","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"distinct-subsequences","has_notes":false,"flag_type":1}