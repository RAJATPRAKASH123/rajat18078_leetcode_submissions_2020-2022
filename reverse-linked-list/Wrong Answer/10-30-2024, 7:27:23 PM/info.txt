{"id":1438227527,"question_id":206,"lang":"python3","lang_name":"Python3","time":"3 months, 4 weeks","timestamp":1730296643,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1438227527/","is_pending":"Not Pending","title":"Reverse Linked List","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return None\n        # def reverseFun(head):\n            if not head.next:\n                return head\n            newHead = reverseFun(head.next)\n            head.next.next = head\n            head.next = None\n            return newHead\n\n        # return reverseFun(head)\n        \n\n'''\n\n        1 ->    2 ->    3 ->    4 ->   5 ->   None\n        cur\n        ```` \n        (head) \nNone <- 1  <-   2   <-  3 ....      <- 5(head)     \n     ````\n\nWhat do we want to achieve?\n\nAns?\n\n  5 -> 4 -> 3 -> 2 -> 1 -> None\nhead\n\n\n\n\nNone <-  1  <-  2  <-   3   <-  4  <-  5    None\n                                            future\n                                            cur\n                                    prev\n\n\nGOAL --\nNone <- 1  <-   2   <-  3 ....      <- 5(head)  \n\ncur = headsw\nprev = None\nfuture = None\nwhile cur != None:\n    future = cur.next\n    cur.next = prev\n    prev = cur\n    cur = future\nhead = prev\n\nQ) Why we are using future? When we can use the cur.next to access next element?\n'''\n\n\n'''\n\n\n\ndef printOneToN(1 ...  n):\n    printOneToN(1 ... n-1)\n    print(n)\n\ndef reverseFun(1 -> 2 -> 3 -> 4 -> 5 -> None): None <- 1 <- 2 <- 3 <- 4 <- 5\n               h                                                         \n\n    sub = reverseFun(2 -> 3 -> 4 -> 5) :: None <- 2 <- 3 <- 4 <- 5\n                                                                 \n    \ndef reverseFun(head):\n    reverseFun(head.next)\n                        None <- 2 <- 3 <- 4 <- 5\n\n                        1 -> 2\n                        h,   h.next\n\n                        None      <- 2 <- 3 <- 4 <- 5\n                        h.next.next     h.next\n    \n    head.next.next = head\n    \n    1 -> 2\n    1 <- 2 <- 3 <- 4 <- 5\n\n    head.next = None\n    None <- 1 <- 2 <- 3 <- 4 <- 5\n\ndef reverseFun(head):\n    if not head.next:\n        head.next \n        return head\n    newHead = reverseFun(head.next)\n    head.next.next = head\n    head.next = None\n    return newHead\n\nInitially :\n\n1 -> 2 -> 3 -> None\nh\n\nExecuted Step : reverseFun(head.next)\n\n1 -> 2 \nh\n\nNone <- 2 <- 3\n\nExecuted Step : head.next.next = head\n\n1 -> 2\n1 <- 2 <- 3\n\nExecuted Step : head.next = None\n\nNone <- 1 <- 2 <- 3\n        h\n\n\n\n\n\n\n'''","compare_result":"0010000000000000000000000000","title_slug":"reverse-linked-list","has_notes":false,"flag_type":1}