{"id":512984818,"question_id":5,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624620948,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/512984818/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \n        start, end = 0, 0\n        def lps(i, j):\n            nonlocal start, end\n            if i == j:\n                return True\n            if i + 1 == j:\n                return s[i] == s[j]\n            if s[i] == s[j] and lps(i+1, j-1):\n                if (j-i > end - start):\n                    start = i ; end = j\n                return True\n            else:\n                return lps(i+1, j) or lps(i, j-1)\n        lps(0, len(s)-1)\n        return s[start:end+1]\n'''\ns : return longest palindromic substring\n\nfor each i , I will check update max using two types of palindromes\n1. odd length\n2. even length\n\n\"babad\"\n\n'''","compare_result":"10110100111111110000011101010011110001111010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}