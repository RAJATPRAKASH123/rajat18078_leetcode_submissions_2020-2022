{"id":506784479,"question_id":51,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1623503544,"status":10,"status_display":"Accepted","runtime":"332 ms","url":"/submissions/detail/506784479/","is_pending":"Not Pending","title":"N-Queens","memory":"14.8 MB","code":"import copy\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        visited = [[0 for i in range(n)] for j in range(n)]\n        cur = [['.' for i in range(n)] for j in range(n)]\n        res = []\n        \n        \n        def markVisited(row, col):\n            nonlocal n\n            for i in range(n):\n                for j in range(n):\n                    if i == row or j == col:\n                        visited[i][j] += 1\n                    elif row-i == col - j:\n                        visited[i][j] += 1\n                    else:\n                        if i + j == row + col:\n                            visited[i][j] += 1\n        def unmarkVisited(row, col):\n            nonlocal n\n            for i in range(n):\n                for j in range(n):\n                    if i == row or j == col:\n                        visited[i][j] -= 1\n                    elif row-i == col - j:\n                        visited[i][j] -= 1\n                    else:\n                        if i + j == row + col:\n                            visited[i][j] -= 1\n                            \n        def helper(i):\n            nonlocal n\n            if i == n :\n                res.append(copy.deepcopy(cur))\n                return\n            for next in range(n):\n                if not visited[i][next]:\n                    cur[i][next] = 'Q'\n                    markVisited(i, next)\n                    helper(i+1)\n                    unmarkVisited(i, next)\n                    cur[i][next] = '.'\n        helper(0)\n        for board in res:\n            for i in range(n):\n                board[i] = \"\".join(board[i])               \n        return res\n'''\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n\n\nanalysis : backtrack\n\ndesign : recursive fun, \n        push (i, j) + mark visited a queen if possible n go to next possiblities (recursively)\n        after exploring\n        pop(i, j) + unmark visited\n        \n        # implementation : visited(let's take visited array)\n        \n        # possiblities : visited \n        array : init with 0s\n'''","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}