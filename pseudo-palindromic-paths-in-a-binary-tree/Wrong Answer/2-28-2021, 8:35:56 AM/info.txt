{"id":461521837,"question_id":1568,"lang":"python3","lang_name":"Python3","time":"3 years, 12 months","timestamp":1614481556,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/461521837/","is_pending":"Not Pending","title":"Pseudo-Palindromic Paths in a Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: TreeNode) -> int:\n        \n        count_pal = 0\n        def helper(root, cur):\n            nonlocal count_pal\n            if not root.left and not root.right:\n                cur += str(root.val)\n                xors = 0\n                for i in range(len(cur)):\n                    xors ^= int(cur[i])\n                if len(cur) % 2 == 0 and xors == 0:\n                    count_pal += 1\n                elif len(cur) % 2 == 1 and cur.count(str(xors))%2 == 1:\n                    count_pal += 1\n                return \n            if root.left:\n                helper(root.left, cur + str(root.val))\n            if root.right:\n                helper(root.right, cur + str(root.val))\n        \n        helper(root, \"\")\n        return count_pal\n","compare_result":"11111110111111111011011000101000110000000000000000000000","title_slug":"pseudo-palindromic-paths-in-a-binary-tree","has_notes":false,"flag_type":1}