{"id":509607832,"question_id":225,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624001749,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/509607832/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"14.3 MB","code":"class MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue = []\n        self.size = 0\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        self.queue.append(x)\n        self.size += 1\n        for i in range(self.size-1):\n            self.queue.append(self.queue.pop(0))\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        if self.queue:\n            self.size -= 1\n            return self.queue.pop(0)\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        if self.queue:\n            return self.queue[0]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return self.size == 0\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()\n\n'''\n-> 3 2 1 ->\n\n3 2 1\n'''\n\n","compare_result":"1111111111111111","title_slug":"implement-stack-using-queues","has_notes":false,"flag_type":1}