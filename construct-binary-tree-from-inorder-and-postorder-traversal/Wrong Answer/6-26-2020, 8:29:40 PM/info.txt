{"id":358623609,"question_id":106,"lang":"python3","lang_name":"Python3","time":"4 years, 8 months","timestamp":1593183580,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/358623609/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n        total_nodes = len(inorder)\n        def search(arr, l , r, key):\n            m = (l+r)//2\n            # print(l, r)\n            if l == r and key == arr[l]:\n                return l\n            if l < r:\n                if key == arr[m]:\n                    return m\n                if key < arr[m]:\n                    return search(arr, l, m, key)\n                return search(arr, m+1, r, key)\n            return -1\n        def helper(li, ri, lp, rp):\n            nonlocal postorder\n            nonlocal inorder\n            if li < ri and lp < rp:\n                root = TreeNode(postorder[rp])\n                idx_inorder = search(inorder, li, ri, root.val)\n                if idx_inorder == -1:\n                    return root\n                print(idx_inorder)\n                temp1 = root\n                temp2 = root\n                temp1.left = helper(li, idx_inorder - 1, lp, rp - (ri - idx_inorder) )\n                temp2.right = helper(idx_inorder + 1, ri, idx_inorder , rp-1 )\n                return root\n            if li == ri:\n                return TreeNode(inorder[li])\n        return helper(0, total_nodes-1, 0, total_nodes-1)\n'''     \ninorder =   [1, 9, 3, 15, 20, 7]\n            \npostorder = [1, 9, 15, 7, 20, 3]\n\n\n'''","compare_result":"11101100010010011000000000010000000000000100000000000000000000000000000000000000000100000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}