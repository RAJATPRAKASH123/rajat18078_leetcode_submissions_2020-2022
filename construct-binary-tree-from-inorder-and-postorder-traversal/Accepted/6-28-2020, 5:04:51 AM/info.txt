{"id":359169704,"question_id":106,"lang":"python3","lang_name":"Python3","time":"4 years, 8 months","timestamp":1593300891,"status":10,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/359169704/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"18.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n        def helper(li, ri, lp, rp):\n            nonlocal inorder\n            nonlocal postorder\n            if li <= ri and lp <= rp:\n                root = TreeNode(postorder[rp])\n                idx_ino = inorder.index(root.val)\n                if li == ri and lp == rp:\n                    return root\n                root.left = helper(li, idx_ino - 1, lp, lp + idx_ino - li - 1)\n                root.right = helper(idx_ino + 1, ri, lp + idx_ino - li , rp - 1)\n                return root\n        return helper(0, len(inorder)-1, 0, len(inorder)-1)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}