{"id":475248422,"question_id":831,"lang":"python3","lang_name":"Python3","time":"3 years, 11 months","timestamp":1617311334,"status":10,"status_display":"Accepted","runtime":"692 ms","url":"/submissions/detail/475248422/","is_pending":"Not Pending","title":"Largest Sum of Averages","memory":"94.8 MB","code":"from collections import defaultdict\nclass Solution:\n    def largestSumOfAverages(self, arr: List[int], k: int) -> float:\n        if k == 1:\n            return sum(arr)/len(arr)\n        preSum = [0]*(len(arr) + 1)\n        for i in range(1, len(arr) + 1):\n            preSum[i] = preSum[i-1] + arr[i-1]\n        memo = defaultdict(int)\n        def helper(prev=0, cur=1, count=0):\n            nonlocal k\n            temp = (prev, cur, count)\n            if temp in memo:\n                return memo[temp]\n            if cur == len(arr):\n                if count == k - 1:\n                    return (preSum[cur] - preSum[prev])/(cur-prev)\n                else:\n                    return float('-inf')\n            if count == k:\n                return float('-inf')\n            memo[temp] = max((preSum[cur] - preSum[prev])/(cur-prev) + helper(cur,cur+1, count + 1), helper(prev, cur+1, count))\n            return memo[temp]\n        return helper()","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"largest-sum-of-averages","has_notes":false,"flag_type":1}