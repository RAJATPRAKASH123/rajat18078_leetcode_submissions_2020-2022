{"id":512259597,"question_id":1706,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624483581,"status":10,"status_display":"Accepted","runtime":"4340 ms","url":"/submissions/detail/512259597/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"151.6 MB","code":"from collections import defaultdict\nfrom heapq import *\nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        graph = defaultdict(list)\n        n = len(points)\n        for i in range(n-1):\n            for j in range(i+1,n):\n                dist = abs(points[j][0] - points[i][0]) + abs(points[j][1] - points[i][1])\n                graph[i].append((dist, j))\n                graph[j].append((dist, i))\n        queue = [(0, 0)]\n        cost = 0\n        visited = [False]*(n)\n        while queue:\n            cur_cost, cur = heappop(queue)\n            if visited[cur]:\n                continue\n            cost += cur_cost\n            visited[cur] = True\n            for temp, neigh in graph[cur]:\n                if not visited[neigh]:\n                    heappush(queue, (temp,neigh))\n        return cost","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}