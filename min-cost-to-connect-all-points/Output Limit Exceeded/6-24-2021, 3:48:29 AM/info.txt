{"id":512273860,"question_id":1706,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624486709,"status":13,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/512273860/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"N/A","code":"from heapq import *\nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        n = len(points)\n        if n <= 1:\n            return 0\n        edgeList = []\n        for i in range(n-1):\n            for j in range(i+1,n):\n                dist = abs(points[j][0] - points[i][0]) + abs(points[j][1] - points[i][1])\n                edgeList.append((dist, i, j))\n        heapify(edgeList)\n        \n        count = 0\n        \n        parent = [i for i in range(n)]\n        \n        def union(u, v):\n            pv = find(v)\n            parent[u] = pv\n        def find(u):\n            while u != parent[u]:\n                u = parent[u]\n            return u\n        cost = 0\n        print(edgeList)\n        while True:\n            wt, u, v = heappop(edgeList)\n            parent_u = find(u)\n            parent_v = find(v)\n            if parent_u == parent_v:\n                continue\n            cost += wt\n            union(parent_u, parent_v)\n            count += 1\n            if count == n-1:\n                break\n        return cost","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}