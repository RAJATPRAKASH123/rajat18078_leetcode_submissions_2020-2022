{"id":971761607,"question_id":134,"lang":"python3","lang_name":"Python3","time":"1 year, 8 months","timestamp":1686820452,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/971761607/","is_pending":"Not Pending","title":"Gas Station","memory":"N/A","code":"class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        newArr = [i - j for i, j in zip(gas, cost)]\n        maxIndex = 0\n        for i in range(len(newArr)):\n            if newArr[i] > newArr[maxIndex]:\n                maxIndex = i\n        totalGas = 0\n        drivePossible = True\n        for i in newArr[maxIndex:] + newArr[0:maxIndex]:\n            totalGas += i\n            if totalGas < 0:\n                drivePossible = False\n        return maxIndex if drivePossible else -1\n'''\nn gas stations -> \na circular route \nith: amount of gas -> gas[i]\nunlimited gas tank - cost[i]\n\nunique soln. guaranteed\n\n\nquestion? Longest consecutive sub-circular array i.e. Sum( gas[i, j]) for each i, j > Sum( cost[i, j]) for each i, j\n\nLet's create a new array with difference gas - cost\n\nalt. quest?\nnewArr -> longest consecutive subarray with max sum\n\n[1,2,3,4,5], cost = [3,4,5,1,2]\n-2, -2, -2, 3, 3\n'''","compare_result":"1111101111110111111111011100110101110111","title_slug":"gas-station","has_notes":false,"flag_type":1}