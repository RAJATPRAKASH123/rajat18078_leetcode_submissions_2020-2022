{"id":600732438,"question_id":909,"lang":"python3","lang_name":"Python3","time":"3 years, 2 months","timestamp":1639315367,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/600732438/","is_pending":"Not Pending","title":"Stone Game","memory":"N/A","code":"class Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n        # \"Alice\" : 0\n        def gameHelperOptimal(turn = 0, left_index = 0, right_index = len(piles) - 1):\n            alice_profit = 0 #  stones of alice - stones of bob\n            if left_index > right_index:\n                return 0\n            if turn == 0:\n                # Alice will choose\n                # 1. choose left\n                left_chosen_profit = piles[left_index] + gameHelperOptimal(turn ^ 1, left_index + 1, right_index)\n                # 2. choose right\n                right_chosen_profit = piles[right_index] + gameHelperOptimal(turn ^ 1, left_index, right_index - 1)\n                alice_profit = max(left_chosen_profit, right_chosen_profit)\n            else:\n                # Bob will choose\n                # 1. choose left\n                left_chosen_profit =  -piles[left_index] + gameHelperOptimal(turn ^ 1, left_index + 1, right_index)\n                # 2. choose right  \n                right_chosen_profit = -piles[right_index] + gameHelperOptimal(turn ^ 1, left_index, right_index - 1)\n                alice_profit = min(left_chosen_profit, right_chosen_profit)\n            \n            return alice_profit\n        if gameHelperOptimal() > 0:\n            return True\n            \n'''\n\n4 2 9 3 5 3\n\nA: 4\nB: 3\n2 9 3 5\nA: 5\nB: 3\nA : 9\nB : 2\n\nA = 4 + 5 + 9\nB : 3 + 5 + 2\n'''","compare_result":"1111111111111111111111111100000000000000000000","title_slug":"stone-game","has_notes":false,"flag_type":1}