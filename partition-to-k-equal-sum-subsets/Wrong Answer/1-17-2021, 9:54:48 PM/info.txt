{"id":444159240,"question_id":698,"lang":"python3","lang_name":"Python3","time":"4Â years, 1Â month","timestamp":1610900688,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/444159240/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"N/A","code":"class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        \n        if sum(nums) % k != 0:\n            return False\n        \n        target = sum(nums)//k\n        dp = [[-1 for j in range(target+3)] for i in range(len(nums)+1)]\n        def count_subsets(s, i, target):\n            if target < 0:\n                return 0\n            if target == 0:\n                return 1\n            if i < 0:\n                return 0\n            if dp[i][target] != -1:\n                return dp[i][target]\n            dp[i][target] = count_subsets(s, i-1, target) + count_subsets(s, i-1, target - s[i])\n            return dp[i][target]\n        \n        if count_subsets(nums, len(nums) -1 ,target) == k:\n            return True\n        return False\n'''\n\n[4, 3, 2, 3, 5, 2, 1]\n     /       \\\n\nnums, k\n\nif sum(nums)%k != 0:\n    return \n\n'''","compare_result":"01001110000000000000111110110000000000000000000000000000010000100011111100111111011111111010111111111111111111111111111111111111111111111111111111111","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false,"flag_type":1}