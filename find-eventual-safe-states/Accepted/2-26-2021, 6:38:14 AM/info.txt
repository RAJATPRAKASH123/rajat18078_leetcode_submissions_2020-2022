{"id":460728142,"question_id":820,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1614301694,"status":10,"status_display":"Accepted","runtime":"752 ms","url":"/submissions/detail/460728142/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"21.2 MB","code":"from collections import deque, defaultdict\nclass Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        n = len(graph)\n        indegree = defaultdict(int)\n        outdegree = defaultdict(int)\n        \n        transposed_graph = defaultdict(list)\n        \n        #let's traverse the graph \n        for i in range(n):\n            outdegree[i] += len(graph[i])\n            for j in graph[i]:\n                indegree[j] += 1\n                transposed_graph[j].append(i)\n        ans = [0 for i in range(n)]\n        \n        queue_out_zero = deque([])\n        \n        for i in range(n):\n            if outdegree[i] == 0:\n                queue_out_zero.append(i)\n        \n        while queue_out_zero:\n            i = queue_out_zero.popleft()\n            ans[i] = 1\n            for neigh in transposed_graph[i]:\n                outdegree[neigh] -= 1\n                if outdegree[neigh] == 0:\n                    queue_out_zero.append(neigh)\n\n        res = deque()\n        for i in range(n):\n            if ans[i] == 1:\n                res.append(i)\n        return res\n        \n\n'''\nA topological sort for k levels # we don't need it\n-> graph coloring problem\n-> a simple dfs while keeping track of color or intime/outtime\nFuck Fuck Fuck\n\nI am gonna do it o.O\n'''","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}