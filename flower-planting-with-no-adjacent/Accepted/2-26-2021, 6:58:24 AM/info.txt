{"id":460733517,"question_id":1120,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1614302904,"status":10,"status_display":"Accepted","runtime":"456 ms","url":"/submissions/detail/460733517/","is_pending":"Not Pending","title":"Flower Planting With No Adjacent","memory":"21.3 MB","code":"from collections import defaultdict\nclass Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n        \n        graph = defaultdict(list)\n        \n        for u, v in paths:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        color = [0 for i in range(n+1)]\n        def dfs(start):\n            possiblity =set( [1,2,3,4] )\n            if color[start] != 0:\n                return \n            for neigh in graph[start]:\n                if color[neigh] != 0:\n                    if color[neigh] in possiblity:\n                        possiblity.remove(color[neigh])\n            # print(start, possiblity)\n            color[start] = list(possiblity)[0]\n            \n        for vertex in range(n+1):\n            if color[vertex] == 0:\n                dfs(vertex)\n        return color[1:]\n                \n        \n        \n        \n'''\nn gardens\n1 to n\npaths:: paths[i] = [xi, yi]\n\nSo, it is basically, coloring the graph problem\n'''","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"flower-planting-with-no-adjacent","has_notes":false,"flag_type":1}