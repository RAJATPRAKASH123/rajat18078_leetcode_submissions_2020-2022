{"id":513794624,"question_id":337,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624774029,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/513794624/","is_pending":"Not Pending","title":"House Robber III","memory":"16.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def rob(self, root: TreeNode) -> int:\n        memo = defaultdict(int)\n        def money(root):\n            if not root:\n                return 0\n            if root in memo:\n                return memo[root]\n            take_money = root.val\n            if root.left:\n                take_money += money(root.left.left) + money(root.left.right)\n            if root.right:\n                take_money += money(root.right.left) + money(root.right.right)\n            dont_take = money(root.left) + money(root.right)\n            memo[root] = max(take_money, dont_take)\n            return memo[root]\n        \n        return money(root)\n                \n'''\n\nif turn == -1:\n\nnode : take it and make turn = 0 for next\n\n       not take it make turn = 1 for next\n       \n       \nif turn == 0:\n    dont't take it call on next\n    \n    \n'''","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}