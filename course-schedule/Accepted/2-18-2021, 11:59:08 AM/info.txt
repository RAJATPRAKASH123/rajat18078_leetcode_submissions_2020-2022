{"id":457485139,"question_id":207,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1613629748,"status":10,"status_display":"Accepted","runtime":"992 ms","url":"/submissions/detail/457485139/","is_pending":"Not Pending","title":"Course Schedule","memory":"17.5 MB","code":"from collections import defaultdict\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \n        graph = defaultdict(list)\n        for i in range(len(prerequisites)):\n            graph[prerequisites[i][1]].append(prerequisites[i][0])\n            \n        def is_cycle(start, visited):\n            visited[start] = 1\n            for neigh in graph[start]:\n                # print(start, neigh)\n                if visited[neigh] == 0:\n                    if is_cycle(neigh, visited):\n                        return True\n                elif visited[neigh] == 1:\n                    return True\n            visited[start] = 2\n            return False\n        \n        visited = [0 for i in range(numCourses)]\n        for node in range(numCourses):\n            visited = [0 for i in range(numCourses)]\n            # print(visited, node, graph)\n            if visited[node] == 0 and is_cycle(node, visited):\n                return False\n        return True","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"course-schedule","has_notes":false,"flag_type":1}