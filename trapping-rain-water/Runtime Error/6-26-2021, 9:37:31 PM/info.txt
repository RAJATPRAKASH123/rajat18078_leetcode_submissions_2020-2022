{"id":513511194,"question_id":42,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624723651,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/513511194/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"N/A","code":"class Solution:\n    def trap(self, height: List[int]) -> int:\n        \n        def waterTrapped(arr):\n            n = len(arr)\n            nextGreater = [n]*(n) # or equal stack\n            stack = []\n            \n            \n            for i in range(n - 1, -1,-1):\n                while stack and arr[stack[-1]] < arr[i]:\n                    stack.pop()\n                if stack:\n                    nextGreater[i] = stack[-1]\n                stack.append(i)\n            # print(arr, nextGreater)\n            \n            cur = 0\n            water = 0\n            while cur != n-1:\n                next = nextGreater[cur]\n                water += (next - cur - 1) * arr[cur]\n                for mid in range(cur+1, next):\n                    water -= arr[mid]\n                cur = next\n            return water\n        \n        max_index = height.index(max(height))\n        return waterTrapped(height[:max_index+1]) + waterTrapped(height[max_index:][::-1] )\n                \n            \n        \n'''\n[0,1,0,2,1,0,1,3,2,1,2,1]\n\ngiven an array: \nwhose max is at the end, \nfind next greater or equal and fill it , do it til the end\nreturn\n'''","compare_result":"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"trapping-rain-water","has_notes":false,"flag_type":1}