{"id":457931057,"question_id":96,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1613725296,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/457931057/","is_pending":"Not Pending","title":"Unique Binary Search Trees","memory":"14.3 MB","code":"class Solution:\n    def numTrees(self, n: int) -> int:\n        memo = defaultdict(int)\n        def unique_bsts(l, r):\n            ans = 0\n            if (l,r) in memo:\n                return memo[(l,r)]\n            if r-l == 2:\n                return 5\n            if r-l == 1:\n                return 2\n            if r-l == 0 or r-l == -1:\n                return 1\n            for root in range(l, r+1):\n                ans += unique_bsts(l, root-1) * unique_bsts(root+1, r)\n            memo[(l,r)] = ans\n            return ans\n        return unique_bsts(1, n)","compare_result":"1111111111111111111","title_slug":"unique-binary-search-trees","has_notes":false,"flag_type":1}