{"id":499365304,"question_id":96,"lang":"python3","lang_name":"Python3","time":"3Â years, 9Â months","timestamp":1622192213,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/499365304/","is_pending":"Not Pending","title":"Unique Binary Search Trees","memory":"14 MB","code":"from collections import defaultdict\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        memo = defaultdict(int)\n        def helper(start, end):\n            if (start, end) in memo:\n                return memo[(start, end)]\n            if start >= end:\n                return 1\n            if end - start == 1:\n                return 2\n            res = 0\n            for i in range(start, end+1):\n                res += helper(start, i-1) * helper(i+1, end)\n            memo[(start, end)] = res\n            return res\n        return helper(1, n)","compare_result":"1111111111111111111","title_slug":"unique-binary-search-trees","has_notes":false,"flag_type":1}