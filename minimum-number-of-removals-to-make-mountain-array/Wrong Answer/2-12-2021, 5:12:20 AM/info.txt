{"id":454986855,"question_id":1766,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1613086940,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/454986855/","is_pending":"Not Pending","title":"Minimum Number of Removals to Make Mountain Array","memory":"N/A","code":"class Solution:\n    def minimumMountainRemovals(self, arr: List[int]) -> int:\n        \n        n = len(arr)\n        left_ith_lis = [0 for i in range(n)]\n        right_ith_lis = [0 for i in range(n)]\n        \n        left_ith_lis[0] = 1\n        for i in range(1, n):\n            for prev in range(i):\n                if arr[prev] < arr[i]:\n                    left_ith_lis[i] = max(1 + left_ith_lis[prev], left_ith_lis[i])\n\n            left_ith_lis[i] = max(left_ith_lis[i], 1)\n        \n        right_ith_lis[n-1] = 1\n        for i in range(n-2,-1,-1):\n            for nextt in range(i+1,n):\n                if arr[nextt] < arr[i]:\n                    right_ith_lis[i] = max(1 + right_ith_lis[nextt], right_ith_lis[i])\n\n            right_ith_lis[i] = max(right_ith_lis[i], 1)\n        ans = 0\n        print(right_ith_lis, left_ith_lis)\n        for i in range(n):\n            ans = max(ans,right_ith_lis[i] + left_ith_lis[i] -1)\n        return n - ans\n        \n'''\nApproach : find maxm bitonic subsequence(maxm)\nans = len(arr) - maxm\n'''","compare_result":"11110111111010000011111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-removals-to-make-mountain-array","has_notes":false,"flag_type":1}