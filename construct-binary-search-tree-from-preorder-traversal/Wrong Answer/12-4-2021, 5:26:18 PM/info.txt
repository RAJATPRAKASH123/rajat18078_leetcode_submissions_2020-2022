{"id":596787888,"question_id":1050,"lang":"python3","lang_name":"Python3","time":"3 years, 2 months","timestamp":1638618978,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/596787888/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:\n        \n        def createTree(preorder):\n            if not preorder:\n                return None\n            root = TreeNode(preorder[0])\n            right_subtree_root_index = -1\n            for i in range(len(preorder)):\n                if preorder[i] > root.val:\n                    right_subtree_root_index = i\n                    break\n            if right_subtree_root_index != -1:\n                root.right = createTree(preorder[right_subtree_root_index:])\n            if len(preorder) > 1 and preorder[1] < preorder[0]:\n                root.left = createTree(preorder[1:right_subtree_root_index])\n            return root\n        return createTree(preorder)\n            \n#         nums.sort -> will sort nums itself and return None\n#       sorted(nums) -> will create a new sorted array and return it","compare_result":"111010100101000000010000000100000001100100001100100100000000000000000000000000100000000000000000000000000000001","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}