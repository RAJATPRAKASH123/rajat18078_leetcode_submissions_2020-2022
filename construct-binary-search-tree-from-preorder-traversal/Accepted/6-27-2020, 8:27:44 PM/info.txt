{"id":358995753,"question_id":1050,"lang":"python3","lang_name":"Python3","time":"4 years, 8 months","timestamp":1593269864,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/358995753/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"14 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n        if not preorder:\n            return\n        root = TreeNode(preorder[0])\n        stack = [root]\n        for i in preorder[1:]:\n            if stack[-1].val > i:\n                stack[-1].left = TreeNode(i)\n                stack.append(stack[-1].left)\n            else:\n                while stack and stack[-1].val < i :\n                    temp = stack.pop()\n                temp.right = TreeNode(i)\n                stack.append(temp.right)\n        return root","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}