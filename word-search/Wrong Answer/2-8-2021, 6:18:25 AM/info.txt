{"id":453412334,"question_id":79,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1612745305,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/453412334/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m, n = len(board), len(board[0])\n        word_length = len(word)\n        if word_length > m*n:\n            return False\n        def dfs( letter_posn, i, j ):\n            if letter_posn == word_length:\n                return True\n            if letter_posn == word_length -1 and not visited[i][j] and board[i][j] == word[letter_posn] :\n                return True\n            \n            if board[i][j] == word[letter_posn] and not visited[i][j]:\n                visited[i][j] = True\n                l,r,u,d = False, False, False, False\n                if j < n-1:\n                    u = dfs(letter_posn+1, i, j+1)\n                if j > 0:\n                    d = dfs(letter_posn+1, i, j-1)\n                if i < m - 1:\n                    r = dfs(letter_posn+1, i+1, j)\n                if i > 0:\n                    l = dfs(letter_posn+1, i-1, j)\n                return u or d or r or l\n            visited[i][j] = False # This is the back-tracking LMAOOOOO\n            return visited[i][j]\n        \n        for i in range(m):\n            for j in range(n):\n                visited = [[False for j in range(n)] for i in range(m)]\n                if dfs(0, i, j):\n                    return True\n        return False\n            \n            \n\n'''\nm, n board\na word\n[[True, True, True, True], \n[False, False, True, True], \n[False, False, True, True]]\n'''","compare_result":"11111111111111111111111111111111111111111111111111111111111110011111111111011111111100000","title_slug":"word-search","has_notes":false,"flag_type":1}