{"id":520023527,"question_id":239,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1625875481,"status":10,"status_display":"Accepted","runtime":"2380 ms","url":"/submissions/detail/520023527/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"30.4 MB","code":"class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        mono_queue = deque()\n        n = len(nums)\n        res = []\n        i = 0\n        for j in range(n):\n            while mono_queue and nums[j] >= nums[mono_queue[-1]]:\n                mono_queue.pop()\n            mono_queue.append(j)\n            while j - mono_queue[0] >= k:\n                mono_queue.popleft()\n            if j - i + 1 == k:\n                res.append(nums[mono_queue[0]])\n                i += 1\n            # print(mono_queue)\n        return res\n'''\n\n1 3 -1 -3 5 3 6 7\n\nhttps://leetcode.com/problems/sliding-window-maximum/discuss/871317/Clear-thinking-process-with-PICTURE-brute-force-to-mono-deque-pythonjavajavascript\n\nWe have nums array\nNow, while sliding the window\nwe will create a monotonic queue (a queue in increasing order)\ni.e. if cur >= \n\n'''","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}