{"id":508461909,"question_id":142,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1623790921,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/508461909/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"17.1 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        \n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                slow = head\n                while slow != fast:\n                    slow = slow.next\n                    fast = fast.next\n                return slow\n                break\n        return None\n            ","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}