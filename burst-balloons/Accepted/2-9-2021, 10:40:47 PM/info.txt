{"id":454093766,"question_id":312,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1612890647,"status":10,"status_display":"Accepted","runtime":"9492 ms","url":"/submissions/detail/454093766/","is_pending":"Not Pending","title":"Burst Balloons","memory":"20.1 MB","code":"class Solution:\n    def maxCoins(self, arr: List[int]) -> int:\n        n = len(arr)\n        \n        arr = [1] + arr + [1]\n        dp = [[0 for i in range(n+1)] for j in range(n+1)]\n        \n        for i in range( n,-1,-1):\n            for j in range(i, n+1):\n                if i == j:\n                    dp[i][j] = 0\n                    continue\n                for k in range(i+1, j+1):\n                    temp = arr[i] * arr[k] * arr[j+1]\n                    dp[i][j] = max(dp[i][j], temp + dp[i][k-1] + dp[k][j])\n        return dp[0][n]\n        \n        # Recursive Solution\n        \n#         def helper(i, j):\n#             if i == j:\n#                 return 0\n#             ans = float('-inf')\n            \n#             if dp[i][j] != -1:\n#                 return dp[i][j]\n#             for k in range(i+1, j+1):\n#                 ans = max(ans, arr[i] * arr[k] * arr[j+1] + helper(i, k-1) + helper(k, j) )\n#             dp[i][j] = ans\n#             return ans\n        \n        return helper(0, n)\n'''\nk-1, k\nk,  k+1\nk-1, k+1\n\n[1,3,1,5,8,1]\n 0       n    > all matrices\n \n \n  3 1 5 8\n3 \n1\n5\n8\n\n'''  ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"burst-balloons","has_notes":false,"flag_type":1}