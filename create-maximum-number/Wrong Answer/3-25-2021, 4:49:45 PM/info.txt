{"id":472260337,"question_id":321,"lang":"python3","lang_name":"Python3","time":"3 years, 11 months","timestamp":1616671185,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/472260337/","is_pending":"Not Pending","title":"Create Maximum Number","memory":"N/A","code":"class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        n1, n2 = len(nums1), len(nums2)\n        we_can_leave = n1 + n2 - k\n        \n        i, j = 0, 0\n        soln = []\n        while i < n1 and j < n2 and k != 0:\n            \n            temp = nums1[i]\n            idx = i\n            for cur in range(i, min(i + we_can_leave + 1, n1)):\n                if temp < nums1[cur]:\n                    temp = nums1[cur]\n                    idx = cur\n            idx1 = idx\n            temp1 = temp\n            \n            temp = nums2[j]\n            idx = j\n            for cur in range(j, min(j + we_can_leave + 1, n2)):\n                if temp < nums2[cur]:\n                    temp = nums2[cur]\n                    idx = cur\n            idx2 = idx\n            temp2 = temp\n            \n            if nums1[idx1] > nums2[idx2]:\n                soln.append(temp1)\n                k -= 1\n                we_can_leave -= idx1 - i\n                i = idx1 + 1\n            elif nums1[idx1] < nums2[idx2]:\n                soln.append(temp2)\n                k -= 1\n                we_can_leave -= idx2 - j\n                j = idx2 + 1\n            else:\n                f = self.maxNumber(nums1[idx1+1:], nums2[j:], k-1)\n                s = self.maxNumber(nums1[i:], nums2[idx2+1:], k-1)\n                soln.append(nums1[idx1])\n                for i, j in zip(f,s):\n                    if i > j:\n                        soln += f\n                        return soln\n                    elif i < j:\n                        soln += s\n                        return soln\n                soln.append(f)\n                return soln\n        while i < n1 and k != 0:\n            temp = nums1[i]\n            idx = i\n            for cur in range(i, min(i + we_can_leave + 1, n1)):\n                if temp < nums1[cur]:\n                    temp = nums1[cur]\n                    idx = cur\n\n            soln.append(temp)\n            i = idx + 1\n            k -= 1\n\n        while j < n2 and k != 0:\n            temp = nums2[j]\n            idx = j\n            for cur in range(j, min(j + we_can_leave + 1, n2)):\n                if temp < nums2[cur]:\n                    temp = nums2[cur]\n                    idx = cur\n            soln.append(temp)\n            j = idx + 1\n            k -= 1\n        return soln","compare_result":"11111111110111100110000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"create-maximum-number","has_notes":false,"flag_type":1}