{"id":448650843,"question_id":300,"lang":"python3","lang_name":"Python3","time":"4 years, 1 month","timestamp":1611780662,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/448650843/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution:\n    def lengthOfLIS(self, arr: List[int]) -> int:\n        arr = [-1000000] + arr\n        dp =[[ -1 for i in range(len(arr)+1)] for j in range(len(arr)+1)]\n        def helper(arr, i, prev):\n            # temp = 0\n            if i == len(arr):\n                return 0\n            if dp[i][prev] != -1:\n                return dp[i][prev]\n            if arr[i] > arr[prev]:\n                dp[i][prev] = max(1 + helper(arr, i+1, i), helper(arr, i+1, prev))\n            else:\n                tt = i+1\n                for t in range(i+1, len(arr)):\n                    if arr[t] > arr[prev]:\n                        tt = t\n                        break\n                dp[i][prev] = max(dp[i][prev], helper(arr, tt, prev))\n            # dp[i][prev] = temp\n            return dp[i][prev]\n            \n        return helper(arr, 1, 0)\n'''\nSamjha, I need to do it in O(logn)\n'''","compare_result":"111111111111111111111110000000000000000000000000000000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}