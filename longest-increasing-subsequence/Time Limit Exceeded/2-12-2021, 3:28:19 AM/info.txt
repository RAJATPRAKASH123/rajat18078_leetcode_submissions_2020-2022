{"id":454961332,"question_id":300,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1613080699,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/454961332/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution:\n    def lengthOfLIS(self, arr: List[int]) -> int:\n        arr.append(10000000000)\n        n = len(arr)\n#         dp = [[0 for j in range(n+1)] for i in range(n+1)]\n#         for i in range(1,n+1):\n#             for nextt in range(i+1, n+1):\n#                 dp[i][nextt] = max(1 + dp[])\n        \n        \n        \n        \n        # Recursive function + Memo\n        dp = [[-1 for j in range(n+1)] for i in range(n+1)]\n        \n        \n        \n        def helper(i, nextt):\n            if i == -1:\n                return 0\n            if dp[i][nextt] != -1:\n                return dp[i][nextt]\n            \n            res = helper( i-1, nextt)\n            if arr[i] < arr[nextt]:\n                res = max(res, 1 + helper(i-1, i))\n            dp[i][nextt] = res\n            return dp[i][nextt]\n            \n        return helper(n-2, n-1) \n\n","compare_result":"111111111111111111111111111111111111111111111111110000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}