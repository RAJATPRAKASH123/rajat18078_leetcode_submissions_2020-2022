{"id":454935412,"question_id":300,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1613074763,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/454935412/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution:\n    def lengthOfLIS(self, arr: List[int]) -> int:\n        arr.append(10000000000)\n        n = len(arr)\n        # Recursive function\n        \n        def helper(i, nextt):\n            if i == -1:\n                return 0\n            if arr[i] < arr[nextt]:\n                return max( helper(i-1, nextt), 1 + helper(i-1, i) )\n            else:\n                prev = -1\n                for t in range(i, -1, -1):\n                    if arr[t] < arr[nextt]:\n                        prev = t\n                        break\n                if prev == -1:\n                    return 0\n                return max(1 + helper(t-1, t ), helper( t-1, nextt) )\n            \n        return helper(n-2, n-1) ","compare_result":"111111111111111111111100000000000000000000000000000000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}