{"id":454948316,"question_id":300,"lang":"java","lang_name":"Java","time":"4Â years","timestamp":1613077648,"status":10,"status_display":"Accepted","runtime":"419 ms","url":"/submissions/detail/454948316/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"103.5 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n        int n = nums.length;\n        \n        int[] new_nums = new int[n+1]; \n        \n        for( int i = 0; i < n; i++ ){\n            new_nums[i] = nums[i];\n        }\n        new_nums[n] = 100000000;\n        \n        int[][] dp = new int[n+1][n+1];\n        for (int i = 0; i < n+1; i++){\n            for ( int j = 0; j < n+1; j++){\n                dp[i][j] = -1;    \n            }\n        }\n        return helper( new_nums, n-1, n, dp);\n    }\n    public int helper( int[] arr,int i,int nextt, int[][] dp ){\n        \n        if (i == -1){return 0;}\n        int cur = -1;\n        if (dp[i][nextt] != -1){\n            return dp[i][nextt];\n        }\n        for (int t = i; t > -1; t--){\n            if (arr[t] < arr[nextt]){\n                cur = t;\n                break;\n            }\n        }\n        if (cur == -1){return 0;}\n        \n        dp[i][nextt] = Math.max( 1 + helper( arr, cur-1, cur , dp), helper( arr, cur-1, nextt, dp ));\n        return dp[i][nextt];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}