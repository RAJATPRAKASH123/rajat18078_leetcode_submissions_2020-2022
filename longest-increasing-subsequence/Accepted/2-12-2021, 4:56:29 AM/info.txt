{"id":454983205,"question_id":300,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1613085989,"status":10,"status_display":"Accepted","runtime":"4000 ms","url":"/submissions/detail/454983205/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"14.6 MB","code":"class Solution:\n    def lengthOfLIS(self, arr: List[int]) -> int:\n        n = len(arr)\n        lis_ith = [0 for i in range(n)]\n        lis_ith[0] = 1\n        for i in range(1,n):\n            for prev in range(i-1, -1, -1):\n                if arr[prev] < arr[i]:\n                    lis_ith[i] = max(lis_ith[i], 1 + lis_ith[prev])\n            lis_ith[i] = max(lis_ith[i], 1)\n        return max(lis_ith)\n'''\n   i\n3, 6, 2, 7 ->\n[0,3,1,6,2,2,7]\n'''\n        \n        # Recursive function + Memo\n#         dp = [[-1 for j in range(n+1)] for i in range(n+1)]\n        \n        \n        \n#         def helper(i, nextt):\n#             if i == -1:\n#                 return 0\n#             if dp[i][nextt] != -1:\n#                 return dp[i][nextt]\n            \n#             res = helper( i-1, nextt)\n#             if arr[i] < arr[nextt]:\n#                 res = max(res, 1 + helper(i-1, i))\n#             dp[i][nextt] = res\n#             return dp[i][nextt]\n            \n#         return helper(n-2, n-1) \n\n","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}