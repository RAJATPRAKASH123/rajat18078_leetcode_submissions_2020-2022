{"id":497530427,"question_id":23,"lang":"python3","lang_name":"Python3","time":"3 years, 9 months","timestamp":1621847838,"status":13,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/497530427/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, arr: List[ListNode]) -> ListNode:\n        # arr : array of linkedLIsts\n        if len(arr) == 0:\n            return \n        if len(arr) == 1:\n            return arr[0]\n        def merge(left, right):\n            merged = ListNode(-100000)\n            temp = merged\n            while left and right:\n                if left.val > right.val:\n                    merged.next = ListNode(right.val)\n                    right = right.next\n                else:\n                    merged.next = ListNode(left.val)\n                    left = left.next\n                merged = merged.next\n            if left:\n                merged.next = left\n            if right:\n                merged.next = right\n            return temp.next\n        def mergeSort(arr, l=0, r=len(arr)-1):\n            #base cases\n            print(l,r, arr)\n            if l > r:\n                return\n            if l == r:\n                return arr[l]\n            mid = (l+r)//2\n            # dividing into two parts\n            left = mergeSort(arr, l, mid)\n            right = mergeSort(arr, mid+1, r)\n            #merging\n            return merge(left, right)\n        return mergeSort(arr)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}