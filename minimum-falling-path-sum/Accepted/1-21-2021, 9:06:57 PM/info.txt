{"id":445934469,"question_id":967,"lang":"python3","lang_name":"Python3","time":"4 years, 1 month","timestamp":1611243417,"status":10,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/445934469/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"15.2 MB","code":"class Solution:\n    def minFallingPathSum(self, arr: List[List[int]]) -> int:\n        n = len(arr)\n        for i in range(1,n):\n            for j in range(0,n):\n                u,d = max(0, j-1), min(n-1, j+1)\n                arr[i][j] += min(arr[i-1][u], arr[i-1][d], arr[i-1][j])\n        return min(arr[n-1])\n    \n#         CORRECT ANSWER via RECURSION\n        # n = len(arr)\n        # dp = [[-1 for i in range(n)] for j in range(n)]\n#         def helper(arr, i,j):\n#             u,d = max(0,j-1), min(len(arr)-1, j+1)\n#             if i == len(arr)-1:\n#                 return arr[i][j]\n#             if dp[i][j] != -1:\n#                 return dp[i][j]\n#             dp[i][j] = arr[i][j] + min( helper(arr, i+1, d), helper(arr, i+1, u), helper(arr, i+1, j) )\n#             return dp[i][j]\n        \n#         temp = float('inf')\n#         for j in range(n):\n#             temp = min(temp,helper(arr,0,j))\n        # return temp","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum","has_notes":false,"flag_type":1}