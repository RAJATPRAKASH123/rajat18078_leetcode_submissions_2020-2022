{"id":1360541309,"question_id":133,"lang":"python3","lang_name":"Python3","time":"6 months, 1 week","timestamp":1724001467,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1360541309/","is_pending":"Not Pending","title":"Clone Graph","memory":"17 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nfrom typing import Optional\nfrom collections import defaultdict\nclass Solution:\n    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:\n        old_to_new = defaultdict(list)\n        def clone_helper(node):\n            if not node:\n                return node\n            clonedNode = Node(node.val)\n            if node in old_to_new:\n                return old_to_new[node]\n            else:\n                old_to_new[node] = clonedNode\n            for neighbor in  node.neighbors:\n                if neighbor:\n                    clonedNode.neighbors.append(clone_helper(neighbor))\n            return clonedNode\n        return clone_helper(node)\n'''\n. -> . -> . -> \n|->.\n|->.\n\n'''","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}