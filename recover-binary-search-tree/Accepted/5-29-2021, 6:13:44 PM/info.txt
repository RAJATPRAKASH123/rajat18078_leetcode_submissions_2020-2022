{"id":499841900,"question_id":99,"lang":"python3","lang_name":"Python3","time":"3 years, 9 months","timestamp":1622292224,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/499841900/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"14.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverTree(self, root: TreeNode) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        def update(root, a, b):\n            if not root:\n                return\n            update(root.left, a, b)\n            if root.val == a:\n                root.val = b\n            elif root.val == b:\n                root.val = a\n            update(root.right, a, b)\n        \n        first, sec, third = float('inf'), float('inf'), float('inf')\n        swapped_node = set()\n        if_one_found = -1\n        def inorder(root):\n            nonlocal first, sec, third, if_one_found\n            if not root:\n                return\n            inorder(root.left)\n            if third == float('inf'):\n                gh = 89\n            elif sec == float('inf'):\n                sec = third\n            else:\n                first = sec\n                sec = third\n            third = root.val\n            if first != float('inf'):\n                if not swapped_node and first > sec:\n                    swapped_node.add(first)\n                    if_one_found = sec\n                elif swapped_node and first > sec:\n                    swapped_node.add(sec)\n            inorder(root.right)\n        inorder(root) \n        \n        # print(first, sec, third, if_one_found)\n        if first == float('inf'): # only 2 nodes in tree\n            update(root, sec, third)\n            return\n        if sec > third:\n            swapped_node.add(third)\n            if len(swapped_node) == 1:\n                if_one_found = sec\n        \n        swapped_node = list(swapped_node)\n        print(swapped_node)\n        if len(swapped_node) == 2:\n            update(root, swapped_node[0], swapped_node[1])\n            return\n        update(root, swapped_node[0], if_one_found)\n        ","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false,"flag_type":1}