{"id":600197557,"question_id":572,"lang":"python3","lang_name":"Python3","time":"3 years, 2 months","timestamp":1639223483,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/600197557/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n        \n        real_subroot = subRoot\n        def findSubtree(root, subRoot):\n            nonlocal real_subroot\n            if not root and not subRoot:\n                return True\n            if not root or not subRoot:\n                return False\n            if root:\n                if root.val == subRoot.val and findSubtree(root.left, subRoot.left) and findSubtree(root.right, subRoot.right):\n                    return True\n                else:\n                    return findSubtree(root.left, real_subroot) or findSubtree(root.right, real_subroot)\n\n        return findSubtree(root, subRoot)\n'''\nroot.val == subRoot.val and\n\nroot.left subtree == subRoot.left subtree and\nroot.right subtree == subRoot.right subtree\n\n'''","compare_result":"11111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}