{"id":996017861,"question_id":1220,"lang":"python3","lang_name":"Python3","time":"1 year, 7 months","timestamp":1689525238,"status":10,"status_display":"Accepted","runtime":"1444 ms","url":"/submissions/detail/996017861/","is_pending":"Not Pending","title":"Smallest Sufficient Team","memory":"79.2 MB","code":"from collections import *\nclass Solution:\n    def smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -> List[int]:\n        n = len(req_skills)\n        ans = [k for k in range(len(people))]\n        tot = (1<< n)-1\n        print(bin(tot))\n        d = {}\n        for i, skill in enumerate(req_skills):\n            d[skill] = 1<<i\n        mp = defaultdict(lambda : -1)\n        def solve(i,vis):\n            nonlocal n\n            if vis == tot:\n                return []\n            if i == len(people):\n                return [k for k in range(61)]\n            if mp[(i,vis)] != -1:\n                return mp[(i,vis)]\n            ppl_skill = 0\n            for skl in people[i]:\n                ppl_skill |= d[skl]\n            a = [i]+ solve(i+1, vis | ppl_skill)\n            b = solve(i+1,vis)\n            if len(a)<= len(b):\n                mp[(i,vis)] = a\n            else:\n                mp[(i,vis)] = b\n            return mp[(i,vis)]\n        return solve(0,0)\n\n            ","compare_result":"11111111111111111111111111111111111111","title_slug":"smallest-sufficient-team","has_notes":false,"flag_type":1}