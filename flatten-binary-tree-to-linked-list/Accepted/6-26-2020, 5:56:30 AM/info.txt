{"id":358388119,"question_id":114,"lang":"python3","lang_name":"Python3","time":"4 years, 8 months","timestamp":1593131190,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/358388119/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"14.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: TreeNode) -> None:\n        def helper(root):\n            if root:\n                flatted_left = helper(root.left)\n                flatted_right = helper(root.right)\n                root.right = flatted_left\n                if flatted_left:\n                    temp = flatted_left\n                    while temp.right:\n                        temp = temp.right\n                    temp.right = flatted_right\n                    root.left = None\n                else:\n                    root.right = flatted_right\n                return root\n        helper(root)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}