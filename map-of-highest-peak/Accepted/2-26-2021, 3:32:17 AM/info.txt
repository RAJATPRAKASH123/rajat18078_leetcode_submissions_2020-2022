{"id":460682205,"question_id":1876,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1614290537,"status":10,"status_display":"Accepted","runtime":"6008 ms","url":"/submissions/detail/460682205/","is_pending":"Not Pending","title":"Map of Highest Peak","memory":"70.8 MB","code":"from collections import deque\nclass Solution:\n    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n        \n        m, n = len(isWater), len(isWater[0])\n        queue = deque([])\n        \n        for i in range(m):\n            for j in range(n):\n                if isWater[i][j] == 1:\n                    queue.append([i,j])\n                    \n        vis = queue.copy()\n        val = -1\n        \n        while queue:\n            temp = deque([])\n            val += 1\n            while queue:\n                [i,j] = queue.popleft()\n                direct = [[i,j+1], [i,j-1], [i+1,j], [i-1,j]]\n                if isWater[i][j] == 0:\n                    isWater[i][j] = val\n                    for ii, jj in direct:\n                        if 0 <= ii < m and 0 <= jj < n:\n                            temp.append([ii,jj])\n                    continue\n                if isWater[i][j] == 1 and val == 0:\n                    for ii, jj in direct:\n                        if 0 <= ii < m and 0 <= jj < n:\n                            temp.append([ii,jj])\n            queue = temp\n        for i,j in vis:\n            isWater[i][j] = 0\n        return isWater\n        \n'''\n[[1,1,0],\n [0,1,1],\n [1,1,1]]\n'''","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"map-of-highest-peak","has_notes":false,"flag_type":1}