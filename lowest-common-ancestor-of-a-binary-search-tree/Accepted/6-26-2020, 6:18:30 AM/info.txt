{"id":358393723,"question_id":235,"lang":"python3","lang_name":"Python3","time":"4 years, 8 months","timestamp":1593132510,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/358393723/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"17.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root:\n            return\n        if root.val == p.val or root.val == q.val:\n            return root\n        if (root.val > p.val and root.val < q.val) or (root.val > q.val and root.val < p.val):\n            return root\n        if root.val < p.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        return self.lowestCommonAncestor(root.left, p, q)","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}