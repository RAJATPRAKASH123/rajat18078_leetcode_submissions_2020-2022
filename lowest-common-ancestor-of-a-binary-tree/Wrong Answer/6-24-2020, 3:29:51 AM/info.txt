{"id":357538228,"question_id":236,"lang":"python3","lang_name":"Python3","time":"4 years, 8 months","timestamp":1592949591,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/357538228/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        def search(root, key, arr): \n            if not root:\n                return False\n            if root.val == key.val:\n                return True\n            arr.append(root)\n            if search(root.left, key, arr) or search(root.right, key, arr):\n                return True\n            \n        arr1 = []\n        search(root, p, arr1)\n        arr2 = []\n        search(root, q, arr2)\n        print(arr1)\n        if len(arr1) > len(arr2):\n            arr1, arr2 = arr2, arr1\n        for i in range(len(arr1)):\n            if arr1[i].val != arr2[i].val:\n                return arr1[i-1]\n        return arr1[len(arr1)-1]","compare_result":"1000000000000000000000000000000","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}