{"id":475813532,"question_id":1093,"lang":"python3","lang_name":"Python3","time":"3 years, 11 months","timestamp":1617435822,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/475813532/","is_pending":"Not Pending","title":"Recover a Tree From Preorder Traversal","memory":"15.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n\n    def recoverFromPreorder(self, s: str) -> TreeNode:\n        # count\n        node_dash = []\n        i = 0\n        while i < len(s):\n            if s[i] != '-':\n                count_nums = 0\n                res = \"\"\n                while i < len(s) and s[i] != '-':\n                    res += s[i]\n                    i += 1\n                    count_nums += 1\n                node_dash.append(int(res))\n            else:\n                count_dashes = 0\n                while s[i] == '-':\n                    count_dashes += 1\n                    i += 1\n                node_dash.append(count_dashes)\n        # print(node_dash)\n        def createTree(l, r, level=1):\n            if l < 0 or r > len(node_dash) or r - l <= 0:\n                return None\n            root = TreeNode(int(node_dash[l]))\n            l_node, r_node = None, None\n            flag = True\n            for i in range(l+1,r,2):\n                # print(i, node_dash[i], level)\n                if flag and node_dash[i] == level:\n                    flag = False\n                    l_node = i+1\n                else:\n                    if node_dash[i] == level:\n                        r_node = i+1\n            # print(l_node, r_node)\n            if l_node and r_node:\n                root.left = createTree(l+2, r_node-1, level + 1 )\n                root.right = createTree(r_node, r, level + 1 )\n            elif l_node:\n                root.left = createTree(l+2, r, level + 1 )\n            return root\n        return createTree(0, len(node_dash))","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"recover-a-tree-from-preorder-traversal","has_notes":false,"flag_type":1}