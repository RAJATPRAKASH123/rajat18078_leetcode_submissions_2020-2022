{"id":475465016,"question_id":110,"lang":"python3","lang_name":"Python3","time":"3 years, 11 months","timestamp":1617357964,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/475465016/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        if not root:\n            return True\n        height = defaultdict()\n        height[None] = 0\n        def height_fun(node):\n            if not node:\n                return 0\n            if node in height:\n                return height[node]\n            height[node] = 1 + max(height_fun(node.left),height_fun(node.right) )\n            return height[node]\n        height_fun(root) # update the height dictionary\n        \n        memo = defaultdict(bool)\n        def check(node):\n            \n            if not node:\n                return True\n            if node in memo:\n                return memo[node]\n            check_l_r = check(node.left) and check(node.right)\n            h_l, h_r = 0, 0\n            \n            if node.left:\n                h_l = height[node.left]\n            if node.right:\n                h_r = height[node.right]\n            height_diff = abs( h_l - h_r ) <= 1 \n            \n            memo[node] = check_l_r and height_diff\n        return check(root)","compare_result":"011000101011100100111111111000011111111111111111111101100001101111111111111111111111111111111111111111111111111111111111111111111111111101111011111100111111111111111111111111111111111111111111111111111111111111000000000111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}