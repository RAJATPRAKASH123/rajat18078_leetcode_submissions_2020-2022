{"id":476238222,"question_id":32,"lang":"python3","lang_name":"Python3","time":"3 years, 10 months","timestamp":1617515400,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/476238222/","is_pending":"Not Pending","title":"Longest Valid Parentheses","memory":"N/A","code":"class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        if not s:\n            return 0\n        stack = deque([])\n        idx = 0\n        for i in s:\n            if not stack:\n                stack.append([i, idx])\n                idx += 1\n                continue\n            if i == '(':\n                stack.append([i, idx])\n            elif i == ')':\n                if stack[-1][0] == '(':\n                    stack.pop()\n                else:\n                    stack.append([i, idx])\n            idx += 1\n        \n        # print(stack)\n        res = 0\n        for i in range(len(stack)):\n            if i == 0:\n                res = max(res, stack[i][1])\n                continue\n            # print(i)\n            res = max(res, stack[i][1] - stack[i-1][1] - 1)\n        res = max(res, len(s) - stack[-1][1]- 1)\n        # print(stack)\n        return res","compare_result":"111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-valid-parentheses","has_notes":false,"flag_type":1}