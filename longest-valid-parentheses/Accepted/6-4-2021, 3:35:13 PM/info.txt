{"id":502867901,"question_id":32,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1622801113,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/502867901/","is_pending":"Not Pending","title":"Longest Valid Parentheses","memory":"15.7 MB","code":"class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        stack = []\n        for i, par in enumerate(s):\n            if not stack or stack[-1][0] == ')' or par == '(':\n                stack.append([par, i])\n            else:\n                if stack[-1][0] == '(':\n                    stack.pop()\n        if not stack:\n            return len(s)\n        res = 0\n        # print(stack)\n        for i in range(1, len(stack)):\n            res = max(res, stack[i][1]-stack[i-1][1]-1)\n        res = max(res, len(s)-stack[-1][1]-1, stack[0][1])\n        return res","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-valid-parentheses","has_notes":false,"flag_type":1}