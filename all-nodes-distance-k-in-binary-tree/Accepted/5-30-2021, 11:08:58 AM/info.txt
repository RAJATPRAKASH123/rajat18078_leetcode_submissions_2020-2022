{"id":500224158,"question_id":893,"lang":"python3","lang_name":"Python3","time":"3 years, 9 months","timestamp":1622353138,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/500224158/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"14.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:\n        \n        parent_global = []; level_target = -1\n        flag = True\n        def dfs(root, target, parents=[], level = 0):\n            nonlocal flag, parent_global, level_target\n            if not root:\n                return\n            if flag and root == target:\n                flag = False\n                level_target = level\n                parent_global = parents[:]\n                return \n            dfs(root.left, target, parents.copy() + [root], level + 1)\n            dfs(root.right, target, parents.copy() + [root], level + 1)\n        \n        dfs(root, target)\n        # print(parent_global)\n        # for i in parent_global:\n        #     print(i.val)\n        # print(level_target)\n        #######################################\n        def bfs(root, visited, level):\n            if level < 0:\n                return []\n            if level == 0:\n                return [root]\n            queue = [root]\n            while queue:\n                cur_level = []\n                while queue:\n                    node = queue.pop(0)\n                    if node.left not in visited and node.left:\n                        cur_level.append(node.left)\n                    if node.right not in visited and node.right:\n                        cur_level.append(node.right)\n                queue = cur_level\n                level -= 1\n                if level == 0:\n                    return cur_level[:]\n            return []\n                    \n        visited = set() \n        parent_global.reverse()\n        parent_global = [target] + parent_global\n        \n        res = []\n        count = k\n        for path_node in parent_global:\n            res += bfs(path_node, visited, count)\n            visited.add(path_node)\n            count -= 1\n        for i in res:\n            print(i.val)\n        return [node.val for node in res]          \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n        \n        \n            ","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false,"flag_type":1}