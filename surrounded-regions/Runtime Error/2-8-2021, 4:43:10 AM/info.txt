{"id":453383771,"question_id":130,"lang":"python3","lang_name":"Python3","time":"4Â years","timestamp":1612739590,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/453383771/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"N/A","code":"class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        # m rows n columns\n        m,n = len(board), len(board[0])\n        arr = [['X' for j in range(n+2)] for i in range(m+2)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if board[i-1][j-1] == 'O':\n                    arr[i][j] = 'O'\n        def dfs(i, j):\n            if i < 0 or i > m+1 or j < 0 or j > n + 1:\n                return\n            if arr[i][j] == 'O':\n                arr[i][j] = 'M'\n                dfs(i,j-1)\n                dfs(i-1,j)\n                dfs(i,j+1)\n                dfs(i+1,j)\n        for i in range(1, m+1):\n            dfs(i, 1);dfs(i,m)\n        for j in range(1, n+1):\n            dfs(1, j);dfs(m,j)\n        for i in range(m):\n            for j in range(m):\n                if arr[i+1][j+1] == 'M':\n                    board[i][j] = 'O'\n                    continue\n                board[i][j] = 'X'\n        return board\n        \n        \n'''\nX X X X\nX O O X\nX X O X\nX O X X\n'''","compare_result":"10000000000000000000000000000000000000000000000000000000000","title_slug":"surrounded-regions","has_notes":false,"flag_type":1}