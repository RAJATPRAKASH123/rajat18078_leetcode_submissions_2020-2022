{"id":513604817,"question_id":972,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1624738336,"status":10,"status_display":"Accepted","runtime":"5700 ms","url":"/submissions/detail/513604817/","is_pending":"Not Pending","title":"Knight Dialer","memory":"100.4 MB","code":"class Solution:\n    def knightDialer(self, n: int) -> int:\n        dp = [[[-1 for i in range(n+1)] for j in range(3)] for i in range(4)]\n        phone_pad = [[1, 1, 1],[1, 1, 1], [1, 1, 1], [0, 1, 0]]\n        def dfs(arr, i, j, steps):\n            if dp[i][j][steps] != -1:\n                return dp[i][j][steps]\n            if steps == 0:\n                return 1\n            moves = [(-1, -2), (-2, -1), (-1, 2), (-2, 1), (1, -2), (2, -1), (1, 2), (2, 1)]\n            res = 0\n            for x, y in moves:\n                pos_x, pos_y = i + x, j + y\n                if 0 <= pos_x < 4 and 0 <= pos_y < 3 and arr[pos_x][pos_y] == 1:\n                    res += dfs(arr, pos_x, pos_y, steps - 1)\n            dp[i][j][steps] = res \n            return res\n        numbers = 0\n        for i in range(4):\n            for j in range(3):\n                if i == 3 and j == 0:\n                    continue\n                if i == 3 and j == 2:\n                    continue\n                numbers += dfs(phone_pad, i, j, n-1) % (10**9 + 7) \n        return numbers % (10**9 + 7)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"knight-dialer","has_notes":false,"flag_type":1}