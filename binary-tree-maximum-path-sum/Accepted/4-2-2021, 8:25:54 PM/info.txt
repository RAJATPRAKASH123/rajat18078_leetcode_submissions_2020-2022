{"id":475536436,"question_id":124,"lang":"python3","lang_name":"Python3","time":"3 years, 11 months","timestamp":1617375354,"status":10,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/475536436/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"25.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def maxPathSum(self, root: TreeNode) -> int:\n        max_path_val = defaultdict(int)\n        \n        def max_path_sum(root):\n            if not root:\n                return 0\n            if root in max_path_val:\n                return max_path_val[root]\n            max_path_val[root] = root.val + max(0, max_path_sum(root.left), max_path_sum(root.right) )\n            return max_path_val[root]\n        max_path_sum(root)\n        memo = defaultdict(int)\n        \n        def helper(root):\n            if not root:\n                return float('-inf')\n            if root in memo:\n                return memo[root]\n            l_max = max(0, max_path_val[root.left])\n            r_max = max(0, max_path_val[root.right])\n            cur_max = max(l_max + root.val, r_max + root.val, l_max + r_max + root.val)\n            \n            memo[root] = max(cur_max, helper(root.left) , helper(root.right))\n            return memo[root]\n        return helper(root)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}