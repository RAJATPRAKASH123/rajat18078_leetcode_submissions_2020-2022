{"id":600724204,"question_id":338,"lang":"python3","lang_name":"Python3","time":"3 years, 2 months","timestamp":1639313614,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/600724204/","is_pending":"Not Pending","title":"Counting Bits","memory":"20.9 MB","code":"class Solution:\n    def countBits(self, n: int) -> List[int]:\n        \n#         recursive approach\n        # if n <= 1:\n        #     return [n]\n        # # if n - 2 ** int(math.log2(n)) \n        # return [1 + self.countBits(n - 2 ** int(math.log2(n)) )[0] ]\n        \n#         dp\n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        count_arr = [0] * (n + 1)\n        count_arr[1] = 1\n        for i in range(2, n+1):\n            count_arr[i] = 1 + count_arr[i - 2 ** int(math.log2(i))]\n        return count_arr\n'''\n\n20 : 10100\n\nrecursive relation : \n number of bits(20) = 1 + number of bits(20 - 2 ** int(log2(20)) )\n \n countBits(i) = 1 + countBits(i - 2 ** int(math.log2(i)) )\n\nRecursive function -> implement recursive function -> use dictionary\nto memoize(memoization) -> use array for dp\n\n'''","compare_result":"111111111111111","title_slug":"counting-bits","has_notes":false,"flag_type":1}