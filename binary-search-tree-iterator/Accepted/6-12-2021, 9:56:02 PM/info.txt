{"id":506891309,"question_id":173,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1623515162,"status":10,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/506891309/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"20.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: TreeNode):\n        self.res = []\n        self.cur = 0\n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.res.append(root.val)\n                inorder(root.right)\n        inorder(root)\n    def next(self) -> int:\n        ans = self.res[self.cur]\n        self.cur += 1\n        return ans\n\n    def hasNext(self) -> bool:\n        return self.cur < len(self.res)\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}