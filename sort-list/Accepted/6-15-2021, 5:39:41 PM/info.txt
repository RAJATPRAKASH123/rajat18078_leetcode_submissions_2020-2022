{"id":508256900,"question_id":148,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1623758981,"status":10,"status_display":"Accepted","runtime":"552 ms","url":"/submissions/detail/508256900/","is_pending":"Not Pending","title":"Sort List","memory":"60.6 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        \n        def merge(first, sec):\n            if not first:\n                return sec\n            if not sec:\n                return first\n            if first.val < sec.val:\n                first.next = merge(first.next, sec)\n            else:\n                first, sec = sec, first\n                first.next = merge(first.next, sec)\n            return first\n            \n        def mergeSort(head):\n            if not head or not head.next:\n                return head\n            slow = head\n            fast = head\n            prev = slow\n            while fast and fast.next:\n                fast = fast.next.next\n                prev = slow\n                slow = slow.next\n            prev.next = None\n            return merge(mergeSort(head), mergeSort(slow))\n        return mergeSort(head)\n    \n'''\n1 4 9 13\n2 7 15 16\n\n1 2\n4\nclass Solution \n{\npublic:\n    ListNode *merge_two(ListNode *first,ListNode *second)\n    {\n        if(!first)\n        {\n            return second;\n        }\n        if(!second)\n        {\n            return first;\n        }\n        if(first->val>second->val)\n        {\n            return merge_two(second,first);\n        }\n        first->next=merge_two(first->next,second);\n        return first;\n    }\n    ListNode* sortList(ListNode* head)\n    {\n        if(!head || !head->next)\n        {\n            return head;\n        }\n        ListNode *slow=head,*fast=head,*tmp=head;\n        while(slow && fast && fast->next)\n        {\n            slow=slow->next;\n            fast=fast->next->next;\n        }\n        while(tmp && tmp->next && tmp->next!=slow)\n        {\n            tmp=tmp->next;\n        }\n        tmp->next=NULL;\n        ListNode *first=sortList(head);\n        ListNode *second=sortList(slow);\n        ListNode *ans=merge_two(first,second);\n        return ans;\n    }\n};\n'''","compare_result":"1111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}