{"id":470105700,"question_id":376,"lang":"python3","lang_name":"Python3","time":"3 years, 11 months","timestamp":1616237124,"status":10,"status_display":"Accepted","runtime":"852 ms","url":"/submissions/detail/470105700/","is_pending":"Not Pending","title":"Wiggle Subsequence","memory":"147.5 MB","code":"from collections import defaultdict\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        dp = defaultdict(int)\n        def wiggle(i, prev=-1, wants=None):\n            res = 0\n            if i == len(nums):\n                return 0\n            if (i, prev, wants) in dp:\n                return dp[(i, prev, wants)]\n            if wants is None:\n                res = max( 1 + wiggle(i+1, i, 1), 1 + wiggle(i+1, i, -1))\n            else:\n                if wants == 1 and nums[prev] < nums[i]:\n                    res = max( 1 + wiggle(i+1, i, -1), wiggle(i+1, prev, 1))\n                elif wants == -1 and nums[prev] > nums[i]:\n                    res = max( 1 + wiggle(i+1, i, 1), wiggle(i+1, prev, -1))\n                else:\n                    res = wiggle(i+1, prev, wants)\n            dp[(i, prev, wants)] = res\n            return res\n        \n        ans = wiggle(0)\n        # print(dp)\n        return ans","compare_result":"11111111111111111111111111","title_slug":"wiggle-subsequence","has_notes":false,"flag_type":1}