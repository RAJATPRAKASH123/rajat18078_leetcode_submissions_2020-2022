{"id":470100561,"question_id":376,"lang":"python3","lang_name":"Python3","time":"3 years, 11 months","timestamp":1616235662,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/470100561/","is_pending":"Not Pending","title":"Wiggle Subsequence","memory":"N/A","code":"from collections import defaultdict\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        dp = defaultdict(int)\n        def wiggle(i, prev=-1, wants=None):\n            res = 0\n            if i == len(nums):\n                return 0\n            if (i, prev) in dp:\n                return dp[(i, prev)]\n            if wants is None:\n                res += max( 1 + wiggle(i+1, i, 1), 1 + wiggle(i+1, i, -1))\n            else:\n                if wants == 1 and nums[prev] < nums[i]:\n                    res += max( 1 + wiggle(i+1, i, -1), wiggle(i+1, prev, 1))\n                elif wants == -1 and nums[prev] > nums[i]:\n                    res += max( 1 + wiggle(i+1, i, 1), wiggle(i+1, prev, -1))\n                else:\n                    res += wiggle(i+1, prev, wants)\n            dp[(i, prev)] = res\n            return res\n        return wiggle(0)","compare_result":"11111101101001111011011111","title_slug":"wiggle-subsequence","has_notes":false,"flag_type":1}